<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protobuf/FingerprintProtocol.proto

namespace WhisperSystems\LibSignal\Fingerprint\FingerprintProtos\;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>textsecure.CombinedFingerprints</code>
 */
class CombinedFingerprints extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>optional uint32 version = 1;</code>
     */
    protected $version = null;
    /**
     * Generated from protobuf field <code>optional .textsecure.LogicalFingerprint localFingerprint = 2;</code>
     */
    protected $localFingerprint = null;
    /**
     * Generated from protobuf field <code>optional .textsecure.LogicalFingerprint remoteFingerprint = 3;</code>
     */
    protected $remoteFingerprint = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $version
     *     @type \WhisperSystems\LibSignal\Fingerprint\FingerprintProtos\\LogicalFingerprint $localFingerprint
     *     @type \WhisperSystems\LibSignal\Fingerprint\FingerprintProtos\\LogicalFingerprint $remoteFingerprint
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Protobuf\FingerprintProtocol::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>optional uint32 version = 1;</code>
     * @return int
     */
    public function getVersion()
    {
        return isset($this->version) ? $this->version : 0;
    }

    public function hasVersion()
    {
        return isset($this->version);
    }

    public function clearVersion()
    {
        unset($this->version);
    }

    /**
     * Generated from protobuf field <code>optional uint32 version = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkUint32($var);
        $this->version = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional .textsecure.LogicalFingerprint localFingerprint = 2;</code>
     * @return \WhisperSystems\LibSignal\Fingerprint\FingerprintProtos\\LogicalFingerprint|null
     */
    public function getLocalFingerprint()
    {
        return isset($this->localFingerprint) ? $this->localFingerprint : null;
    }

    public function hasLocalFingerprint()
    {
        return isset($this->localFingerprint);
    }

    public function clearLocalFingerprint()
    {
        unset($this->localFingerprint);
    }

    /**
     * Generated from protobuf field <code>optional .textsecure.LogicalFingerprint localFingerprint = 2;</code>
     * @param \WhisperSystems\LibSignal\Fingerprint\FingerprintProtos\\LogicalFingerprint $var
     * @return $this
     */
    public function setLocalFingerprint($var)
    {
        GPBUtil::checkMessage($var, \WhisperSystems\LibSignal\Fingerprint\FingerprintProtos\\LogicalFingerprint::class);
        $this->localFingerprint = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional .textsecure.LogicalFingerprint remoteFingerprint = 3;</code>
     * @return \WhisperSystems\LibSignal\Fingerprint\FingerprintProtos\\LogicalFingerprint|null
     */
    public function getRemoteFingerprint()
    {
        return isset($this->remoteFingerprint) ? $this->remoteFingerprint : null;
    }

    public function hasRemoteFingerprint()
    {
        return isset($this->remoteFingerprint);
    }

    public function clearRemoteFingerprint()
    {
        unset($this->remoteFingerprint);
    }

    /**
     * Generated from protobuf field <code>optional .textsecure.LogicalFingerprint remoteFingerprint = 3;</code>
     * @param \WhisperSystems\LibSignal\Fingerprint\FingerprintProtos\\LogicalFingerprint $var
     * @return $this
     */
    public function setRemoteFingerprint($var)
    {
        GPBUtil::checkMessage($var, \WhisperSystems\LibSignal\Fingerprint\FingerprintProtos\\LogicalFingerprint::class);
        $this->remoteFingerprint = $var;

        return $this;
    }

}

